/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BeatService } from "../beat.service";
import { BeatCreateInput } from "./BeatCreateInput";
import { Beat } from "./Beat";
import { BeatFindManyArgs } from "./BeatFindManyArgs";
import { BeatWhereUniqueInput } from "./BeatWhereUniqueInput";
import { BeatUpdateInput } from "./BeatUpdateInput";

export class BeatControllerBase {
  constructor(protected readonly service: BeatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Beat })
  async createBeat(@common.Body() data: BeatCreateInput): Promise<Beat> {
    return await this.service.createBeat({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sceneId: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Beat] })
  @ApiNestedQuery(BeatFindManyArgs)
  async beats(@common.Req() request: Request): Promise<Beat[]> {
    const args = plainToClass(BeatFindManyArgs, request.query);
    return this.service.beats({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sceneId: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Beat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async beat(
    @common.Param() params: BeatWhereUniqueInput
  ): Promise<Beat | null> {
    const result = await this.service.beat({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        sceneId: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Beat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBeat(
    @common.Param() params: BeatWhereUniqueInput,
    @common.Body() data: BeatUpdateInput
  ): Promise<Beat | null> {
    try {
      return await this.service.updateBeat({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          sceneId: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Beat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBeat(
    @common.Param() params: BeatWhereUniqueInput
  ): Promise<Beat | null> {
    try {
      return await this.service.deleteBeat({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          sceneId: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
