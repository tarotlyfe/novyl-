/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Beat } from "./Beat";
import { BeatCountArgs } from "./BeatCountArgs";
import { BeatFindManyArgs } from "./BeatFindManyArgs";
import { BeatFindUniqueArgs } from "./BeatFindUniqueArgs";
import { CreateBeatArgs } from "./CreateBeatArgs";
import { UpdateBeatArgs } from "./UpdateBeatArgs";
import { DeleteBeatArgs } from "./DeleteBeatArgs";
import { BeatService } from "../beat.service";
@graphql.Resolver(() => Beat)
export class BeatResolverBase {
  constructor(protected readonly service: BeatService) {}

  async _beatsMeta(
    @graphql.Args() args: BeatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Beat])
  async beats(@graphql.Args() args: BeatFindManyArgs): Promise<Beat[]> {
    return this.service.beats(args);
  }

  @graphql.Query(() => Beat, { nullable: true })
  async beat(@graphql.Args() args: BeatFindUniqueArgs): Promise<Beat | null> {
    const result = await this.service.beat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Beat)
  async createBeat(@graphql.Args() args: CreateBeatArgs): Promise<Beat> {
    return await this.service.createBeat({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Beat)
  async updateBeat(@graphql.Args() args: UpdateBeatArgs): Promise<Beat | null> {
    try {
      return await this.service.updateBeat({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Beat)
  async deleteBeat(@graphql.Args() args: DeleteBeatArgs): Promise<Beat | null> {
    try {
      return await this.service.deleteBeat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
