/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Beat as PrismaBeat } from "@prisma/client";

export class BeatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BeatCountArgs, "select">): Promise<number> {
    return this.prisma.beat.count(args);
  }

  async beats<T extends Prisma.BeatFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeatFindManyArgs>
  ): Promise<PrismaBeat[]> {
    return this.prisma.beat.findMany<Prisma.BeatFindManyArgs>(args);
  }
  async beat<T extends Prisma.BeatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeatFindUniqueArgs>
  ): Promise<PrismaBeat | null> {
    return this.prisma.beat.findUnique(args);
  }
  async createBeat<T extends Prisma.BeatCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeatCreateArgs>
  ): Promise<PrismaBeat> {
    return this.prisma.beat.create<T>(args);
  }
  async updateBeat<T extends Prisma.BeatUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeatUpdateArgs>
  ): Promise<PrismaBeat> {
    return this.prisma.beat.update<T>(args);
  }
  async deleteBeat<T extends Prisma.BeatDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BeatDeleteArgs>
  ): Promise<PrismaBeat> {
    return this.prisma.beat.delete(args);
  }
}
