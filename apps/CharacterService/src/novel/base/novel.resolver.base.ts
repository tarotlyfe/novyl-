/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Novel } from "./Novel";
import { NovelCountArgs } from "./NovelCountArgs";
import { NovelFindManyArgs } from "./NovelFindManyArgs";
import { NovelFindUniqueArgs } from "./NovelFindUniqueArgs";
import { CreateNovelArgs } from "./CreateNovelArgs";
import { UpdateNovelArgs } from "./UpdateNovelArgs";
import { DeleteNovelArgs } from "./DeleteNovelArgs";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { NovelService } from "../novel.service";
@graphql.Resolver(() => Novel)
export class NovelResolverBase {
  constructor(protected readonly service: NovelService) {}

  async _novelsMeta(
    @graphql.Args() args: NovelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Novel])
  async novels(@graphql.Args() args: NovelFindManyArgs): Promise<Novel[]> {
    return this.service.novels(args);
  }

  @graphql.Query(() => Novel, { nullable: true })
  async novel(
    @graphql.Args() args: NovelFindUniqueArgs
  ): Promise<Novel | null> {
    const result = await this.service.novel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Novel)
  async createNovel(@graphql.Args() args: CreateNovelArgs): Promise<Novel> {
    return await this.service.createNovel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Novel)
  async updateNovel(
    @graphql.Args() args: UpdateNovelArgs
  ): Promise<Novel | null> {
    try {
      return await this.service.updateNovel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Novel)
  async deleteNovel(
    @graphql.Args() args: DeleteNovelArgs
  ): Promise<Novel | null> {
    try {
      return await this.service.deleteNovel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Character], { name: "characters" })
  async findCharacters(
    @graphql.Parent() parent: Novel,
    @graphql.Args() args: CharacterFindManyArgs
  ): Promise<Character[]> {
    const results = await this.service.findCharacters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
