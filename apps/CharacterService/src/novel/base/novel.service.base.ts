/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Novel as PrismaNovel,
  Character as PrismaCharacter,
} from "@prisma/client";

export class NovelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NovelCountArgs, "select">): Promise<number> {
    return this.prisma.novel.count(args);
  }

  async novels<T extends Prisma.NovelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NovelFindManyArgs>
  ): Promise<PrismaNovel[]> {
    return this.prisma.novel.findMany<Prisma.NovelFindManyArgs>(args);
  }
  async novel<T extends Prisma.NovelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NovelFindUniqueArgs>
  ): Promise<PrismaNovel | null> {
    return this.prisma.novel.findUnique(args);
  }
  async createNovel<T extends Prisma.NovelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NovelCreateArgs>
  ): Promise<PrismaNovel> {
    return this.prisma.novel.create<T>(args);
  }
  async updateNovel<T extends Prisma.NovelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NovelUpdateArgs>
  ): Promise<PrismaNovel> {
    return this.prisma.novel.update<T>(args);
  }
  async deleteNovel<T extends Prisma.NovelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NovelDeleteArgs>
  ): Promise<PrismaNovel> {
    return this.prisma.novel.delete(args);
  }

  async findCharacters(
    parentId: string,
    args: Prisma.CharacterFindManyArgs
  ): Promise<PrismaCharacter[]> {
    return this.prisma.novel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .characters(args);
  }
}
