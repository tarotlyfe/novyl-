/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutlineService } from "../outline.service";
import { OutlineCreateInput } from "./OutlineCreateInput";
import { Outline } from "./Outline";
import { OutlineFindManyArgs } from "./OutlineFindManyArgs";
import { OutlineWhereUniqueInput } from "./OutlineWhereUniqueInput";
import { OutlineUpdateInput } from "./OutlineUpdateInput";

export class OutlineControllerBase {
  constructor(protected readonly service: OutlineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Outline })
  async createOutline(
    @common.Body() data: OutlineCreateInput
  ): Promise<Outline> {
    return await this.service.createOutline({
      data: data,
      select: {
        createdAt: true,
        id: true,
        novelId: true,
        outlineItems: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Outline] })
  @ApiNestedQuery(OutlineFindManyArgs)
  async outlines(@common.Req() request: Request): Promise<Outline[]> {
    const args = plainToClass(OutlineFindManyArgs, request.query);
    return this.service.outlines({
      ...args,
      select: {
        createdAt: true,
        id: true,
        novelId: true,
        outlineItems: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Outline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outline(
    @common.Param() params: OutlineWhereUniqueInput
  ): Promise<Outline | null> {
    const result = await this.service.outline({
      where: params,
      select: {
        createdAt: true,
        id: true,
        novelId: true,
        outlineItems: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Outline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutline(
    @common.Param() params: OutlineWhereUniqueInput,
    @common.Body() data: OutlineUpdateInput
  ): Promise<Outline | null> {
    try {
      return await this.service.updateOutline({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          novelId: true,
          outlineItems: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Outline })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutline(
    @common.Param() params: OutlineWhereUniqueInput
  ): Promise<Outline | null> {
    try {
      return await this.service.deleteOutline({
        where: params,
        select: {
          createdAt: true,
          id: true,
          novelId: true,
          outlineItems: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
