/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Outline } from "./Outline";
import { OutlineCountArgs } from "./OutlineCountArgs";
import { OutlineFindManyArgs } from "./OutlineFindManyArgs";
import { OutlineFindUniqueArgs } from "./OutlineFindUniqueArgs";
import { CreateOutlineArgs } from "./CreateOutlineArgs";
import { UpdateOutlineArgs } from "./UpdateOutlineArgs";
import { DeleteOutlineArgs } from "./DeleteOutlineArgs";
import { OutlineService } from "../outline.service";
@graphql.Resolver(() => Outline)
export class OutlineResolverBase {
  constructor(protected readonly service: OutlineService) {}

  async _outlinesMeta(
    @graphql.Args() args: OutlineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Outline])
  async outlines(
    @graphql.Args() args: OutlineFindManyArgs
  ): Promise<Outline[]> {
    return this.service.outlines(args);
  }

  @graphql.Query(() => Outline, { nullable: true })
  async outline(
    @graphql.Args() args: OutlineFindUniqueArgs
  ): Promise<Outline | null> {
    const result = await this.service.outline(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Outline)
  async createOutline(
    @graphql.Args() args: CreateOutlineArgs
  ): Promise<Outline> {
    return await this.service.createOutline({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Outline)
  async updateOutline(
    @graphql.Args() args: UpdateOutlineArgs
  ): Promise<Outline | null> {
    try {
      return await this.service.updateOutline({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Outline)
  async deleteOutline(
    @graphql.Args() args: DeleteOutlineArgs
  ): Promise<Outline | null> {
    try {
      return await this.service.deleteOutline(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
