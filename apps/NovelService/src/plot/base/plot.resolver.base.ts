/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Plot } from "./Plot";
import { PlotCountArgs } from "./PlotCountArgs";
import { PlotFindManyArgs } from "./PlotFindManyArgs";
import { PlotFindUniqueArgs } from "./PlotFindUniqueArgs";
import { CreatePlotArgs } from "./CreatePlotArgs";
import { UpdatePlotArgs } from "./UpdatePlotArgs";
import { DeletePlotArgs } from "./DeletePlotArgs";
import { PlotService } from "../plot.service";
@graphql.Resolver(() => Plot)
export class PlotResolverBase {
  constructor(protected readonly service: PlotService) {}

  async _plotsMeta(
    @graphql.Args() args: PlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Plot])
  async plots(@graphql.Args() args: PlotFindManyArgs): Promise<Plot[]> {
    return this.service.plots(args);
  }

  @graphql.Query(() => Plot, { nullable: true })
  async plot(@graphql.Args() args: PlotFindUniqueArgs): Promise<Plot | null> {
    const result = await this.service.plot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Plot)
  async createPlot(@graphql.Args() args: CreatePlotArgs): Promise<Plot> {
    return await this.service.createPlot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Plot)
  async updatePlot(@graphql.Args() args: UpdatePlotArgs): Promise<Plot | null> {
    try {
      return await this.service.updatePlot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Plot)
  async deletePlot(@graphql.Args() args: DeletePlotArgs): Promise<Plot | null> {
    try {
      return await this.service.deletePlot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
