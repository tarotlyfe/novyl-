/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlotService } from "../plot.service";
import { PlotCreateInput } from "./PlotCreateInput";
import { Plot } from "./Plot";
import { PlotFindManyArgs } from "./PlotFindManyArgs";
import { PlotWhereUniqueInput } from "./PlotWhereUniqueInput";
import { PlotUpdateInput } from "./PlotUpdateInput";

export class PlotControllerBase {
  constructor(protected readonly service: PlotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Plot })
  async createPlot(@common.Body() data: PlotCreateInput): Promise<Plot> {
    return await this.service.createPlot({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        novelId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Plot] })
  @ApiNestedQuery(PlotFindManyArgs)
  async plots(@common.Req() request: Request): Promise<Plot[]> {
    const args = plainToClass(PlotFindManyArgs, request.query);
    return this.service.plots({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        novelId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Plot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async plot(
    @common.Param() params: PlotWhereUniqueInput
  ): Promise<Plot | null> {
    const result = await this.service.plot({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        novelId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Plot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlot(
    @common.Param() params: PlotWhereUniqueInput,
    @common.Body() data: PlotUpdateInput
  ): Promise<Plot | null> {
    try {
      return await this.service.updatePlot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          novelId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Plot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlot(
    @common.Param() params: PlotWhereUniqueInput
  ): Promise<Plot | null> {
    try {
      return await this.service.deletePlot({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          novelId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
