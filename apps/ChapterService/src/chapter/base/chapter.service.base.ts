/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Chapter as PrismaChapter,
  OutlineItem as PrismaOutlineItem,
  Scene as PrismaScene,
} from "@prisma/client";

export class ChapterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChapterCountArgs, "select">): Promise<number> {
    return this.prisma.chapter.count(args);
  }

  async chapters<T extends Prisma.ChapterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChapterFindManyArgs>
  ): Promise<PrismaChapter[]> {
    return this.prisma.chapter.findMany<Prisma.ChapterFindManyArgs>(args);
  }
  async chapter<T extends Prisma.ChapterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChapterFindUniqueArgs>
  ): Promise<PrismaChapter | null> {
    return this.prisma.chapter.findUnique(args);
  }
  async createChapter<T extends Prisma.ChapterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChapterCreateArgs>
  ): Promise<PrismaChapter> {
    return this.prisma.chapter.create<T>(args);
  }
  async updateChapter<T extends Prisma.ChapterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChapterUpdateArgs>
  ): Promise<PrismaChapter> {
    return this.prisma.chapter.update<T>(args);
  }
  async deleteChapter<T extends Prisma.ChapterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChapterDeleteArgs>
  ): Promise<PrismaChapter> {
    return this.prisma.chapter.delete(args);
  }

  async findOutlineItems(
    parentId: string,
    args: Prisma.OutlineItemFindManyArgs
  ): Promise<PrismaOutlineItem[]> {
    return this.prisma.chapter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .outlineItems(args);
  }

  async findScenes(
    parentId: string,
    args: Prisma.SceneFindManyArgs
  ): Promise<PrismaScene[]> {
    return this.prisma.chapter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scenes(args);
  }
}
