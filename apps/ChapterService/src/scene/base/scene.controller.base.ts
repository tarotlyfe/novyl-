/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SceneService } from "../scene.service";
import { SceneCreateInput } from "./SceneCreateInput";
import { Scene } from "./Scene";
import { SceneFindManyArgs } from "./SceneFindManyArgs";
import { SceneWhereUniqueInput } from "./SceneWhereUniqueInput";
import { SceneUpdateInput } from "./SceneUpdateInput";
import { OutlineItemFindManyArgs } from "../../outlineItem/base/OutlineItemFindManyArgs";
import { OutlineItem } from "../../outlineItem/base/OutlineItem";
import { OutlineItemWhereUniqueInput } from "../../outlineItem/base/OutlineItemWhereUniqueInput";

export class SceneControllerBase {
  constructor(protected readonly service: SceneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scene })
  async createScene(@common.Body() data: SceneCreateInput): Promise<Scene> {
    return await this.service.createScene({
      data: {
        ...data,

        chapter: data.chapter
          ? {
              connect: data.chapter,
            }
          : undefined,
      },
      select: {
        beats: true,

        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scene] })
  @ApiNestedQuery(SceneFindManyArgs)
  async scenes(@common.Req() request: Request): Promise<Scene[]> {
    const args = plainToClass(SceneFindManyArgs, request.query);
    return this.service.scenes({
      ...args,
      select: {
        beats: true,

        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scene(
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Scene | null> {
    const result = await this.service.scene({
      where: params,
      select: {
        beats: true,

        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScene(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() data: SceneUpdateInput
  ): Promise<Scene | null> {
    try {
      return await this.service.updateScene({
        where: params,
        data: {
          ...data,

          chapter: data.chapter
            ? {
                connect: data.chapter,
              }
            : undefined,
        },
        select: {
          beats: true,

          chapter: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScene(
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Scene | null> {
    try {
      return await this.service.deleteScene({
        where: params,
        select: {
          beats: true,

          chapter: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/outlineItems")
  @ApiNestedQuery(OutlineItemFindManyArgs)
  async findOutlineItems(
    @common.Req() request: Request,
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<OutlineItem[]> {
    const query = plainToClass(OutlineItemFindManyArgs, request.query);
    const results = await this.service.findOutlineItems(params.id, {
      ...query,
      select: {
        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        outlineId: true,

        scene: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/outlineItems")
  async connectOutlineItems(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: OutlineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outlineItems: {
        connect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/outlineItems")
  async updateOutlineItems(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: OutlineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outlineItems: {
        set: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/outlineItems")
  async disconnectOutlineItems(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: OutlineItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outlineItems: {
        disconnect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }
}
