/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutlineItemService } from "../outlineItem.service";
import { OutlineItemCreateInput } from "./OutlineItemCreateInput";
import { OutlineItem } from "./OutlineItem";
import { OutlineItemFindManyArgs } from "./OutlineItemFindManyArgs";
import { OutlineItemWhereUniqueInput } from "./OutlineItemWhereUniqueInput";
import { OutlineItemUpdateInput } from "./OutlineItemUpdateInput";

export class OutlineItemControllerBase {
  constructor(protected readonly service: OutlineItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OutlineItem })
  async createOutlineItem(
    @common.Body() data: OutlineItemCreateInput
  ): Promise<OutlineItem> {
    return await this.service.createOutlineItem({
      data: {
        ...data,

        chapter: data.chapter
          ? {
              connect: data.chapter,
            }
          : undefined,

        scene: data.scene
          ? {
              connect: data.scene,
            }
          : undefined,
      },
      select: {
        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        outlineId: true,

        scene: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OutlineItem] })
  @ApiNestedQuery(OutlineItemFindManyArgs)
  async outlineItems(@common.Req() request: Request): Promise<OutlineItem[]> {
    const args = plainToClass(OutlineItemFindManyArgs, request.query);
    return this.service.outlineItems({
      ...args,
      select: {
        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        outlineId: true,

        scene: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OutlineItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outlineItem(
    @common.Param() params: OutlineItemWhereUniqueInput
  ): Promise<OutlineItem | null> {
    const result = await this.service.outlineItem({
      where: params,
      select: {
        chapter: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        outlineId: true,

        scene: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OutlineItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutlineItem(
    @common.Param() params: OutlineItemWhereUniqueInput,
    @common.Body() data: OutlineItemUpdateInput
  ): Promise<OutlineItem | null> {
    try {
      return await this.service.updateOutlineItem({
        where: params,
        data: {
          ...data,

          chapter: data.chapter
            ? {
                connect: data.chapter,
              }
            : undefined,

          scene: data.scene
            ? {
                connect: data.scene,
              }
            : undefined,
        },
        select: {
          chapter: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          outlineId: true,

          scene: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OutlineItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutlineItem(
    @common.Param() params: OutlineItemWhereUniqueInput
  ): Promise<OutlineItem | null> {
    try {
      return await this.service.deleteOutlineItem({
        where: params,
        select: {
          chapter: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          outlineId: true,

          scene: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
