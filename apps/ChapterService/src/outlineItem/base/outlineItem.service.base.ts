/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OutlineItem as PrismaOutlineItem,
  Chapter as PrismaChapter,
  Scene as PrismaScene,
} from "@prisma/client";

export class OutlineItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OutlineItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.outlineItem.count(args);
  }

  async outlineItems<T extends Prisma.OutlineItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutlineItemFindManyArgs>
  ): Promise<PrismaOutlineItem[]> {
    return this.prisma.outlineItem.findMany<Prisma.OutlineItemFindManyArgs>(
      args
    );
  }
  async outlineItem<T extends Prisma.OutlineItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutlineItemFindUniqueArgs>
  ): Promise<PrismaOutlineItem | null> {
    return this.prisma.outlineItem.findUnique(args);
  }
  async createOutlineItem<T extends Prisma.OutlineItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutlineItemCreateArgs>
  ): Promise<PrismaOutlineItem> {
    return this.prisma.outlineItem.create<T>(args);
  }
  async updateOutlineItem<T extends Prisma.OutlineItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutlineItemUpdateArgs>
  ): Promise<PrismaOutlineItem> {
    return this.prisma.outlineItem.update<T>(args);
  }
  async deleteOutlineItem<T extends Prisma.OutlineItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutlineItemDeleteArgs>
  ): Promise<PrismaOutlineItem> {
    return this.prisma.outlineItem.delete(args);
  }

  async getChapter(parentId: string): Promise<PrismaChapter | null> {
    return this.prisma.outlineItem
      .findUnique({
        where: { id: parentId },
      })
      .chapter();
  }

  async getScene(parentId: string): Promise<PrismaScene | null> {
    return this.prisma.outlineItem
      .findUnique({
        where: { id: parentId },
      })
      .scene();
  }
}
