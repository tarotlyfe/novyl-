/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OutlineItem } from "./OutlineItem";
import { OutlineItemCountArgs } from "./OutlineItemCountArgs";
import { OutlineItemFindManyArgs } from "./OutlineItemFindManyArgs";
import { OutlineItemFindUniqueArgs } from "./OutlineItemFindUniqueArgs";
import { CreateOutlineItemArgs } from "./CreateOutlineItemArgs";
import { UpdateOutlineItemArgs } from "./UpdateOutlineItemArgs";
import { DeleteOutlineItemArgs } from "./DeleteOutlineItemArgs";
import { Chapter } from "../../chapter/base/Chapter";
import { Scene } from "../../scene/base/Scene";
import { OutlineItemService } from "../outlineItem.service";
@graphql.Resolver(() => OutlineItem)
export class OutlineItemResolverBase {
  constructor(protected readonly service: OutlineItemService) {}

  async _outlineItemsMeta(
    @graphql.Args() args: OutlineItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OutlineItem])
  async outlineItems(
    @graphql.Args() args: OutlineItemFindManyArgs
  ): Promise<OutlineItem[]> {
    return this.service.outlineItems(args);
  }

  @graphql.Query(() => OutlineItem, { nullable: true })
  async outlineItem(
    @graphql.Args() args: OutlineItemFindUniqueArgs
  ): Promise<OutlineItem | null> {
    const result = await this.service.outlineItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OutlineItem)
  async createOutlineItem(
    @graphql.Args() args: CreateOutlineItemArgs
  ): Promise<OutlineItem> {
    return await this.service.createOutlineItem({
      ...args,
      data: {
        ...args.data,

        chapter: args.data.chapter
          ? {
              connect: args.data.chapter,
            }
          : undefined,

        scene: args.data.scene
          ? {
              connect: args.data.scene,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OutlineItem)
  async updateOutlineItem(
    @graphql.Args() args: UpdateOutlineItemArgs
  ): Promise<OutlineItem | null> {
    try {
      return await this.service.updateOutlineItem({
        ...args,
        data: {
          ...args.data,

          chapter: args.data.chapter
            ? {
                connect: args.data.chapter,
              }
            : undefined,

          scene: args.data.scene
            ? {
                connect: args.data.scene,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OutlineItem)
  async deleteOutlineItem(
    @graphql.Args() args: DeleteOutlineItemArgs
  ): Promise<OutlineItem | null> {
    try {
      return await this.service.deleteOutlineItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Chapter, {
    nullable: true,
    name: "chapter",
  })
  async getChapter(
    @graphql.Parent() parent: OutlineItem
  ): Promise<Chapter | null> {
    const result = await this.service.getChapter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Scene, {
    nullable: true,
    name: "scene",
  })
  async getScene(@graphql.Parent() parent: OutlineItem): Promise<Scene | null> {
    const result = await this.service.getScene(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
